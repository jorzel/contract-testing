{"/home/jorzel/coding/contract-testing/graphql/src/consumer.spec.ts":{"path":"/home/jorzel/coding/contract-testing/graphql/src/consumer.spec.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":4,"column":11},"end":{"line":4,"column":26}},"2":{"start":{"line":5,"column":11},"end":{"line":5,"column":26}},"3":{"start":{"line":6,"column":21},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":38}},"5":{"start":{"line":8,"column":13},"end":{"line":8,"column":45}},"6":{"start":{"line":9,"column":11},"end":{"line":9,"column":31}},"7":{"start":{"line":11,"column":16},"end":{"line":11,"column":48}},"8":{"start":{"line":12,"column":13},"end":{"line":12,"column":24}},"9":{"start":{"line":13,"column":0},"end":{"line":13,"column":25}},"10":{"start":{"line":14,"column":0},"end":{"line":59,"column":3}},"11":{"start":{"line":15,"column":19},"end":{"line":22,"column":6}},"12":{"start":{"line":23,"column":4},"end":{"line":23,"column":53}},"13":{"start":{"line":23,"column":25},"end":{"line":23,"column":49}},"14":{"start":{"line":24,"column":4},"end":{"line":24,"column":55}},"15":{"start":{"line":24,"column":24},"end":{"line":24,"column":51}},"16":{"start":{"line":25,"column":4},"end":{"line":58,"column":7}},"17":{"start":{"line":26,"column":8},"end":{"line":50,"column":11}},"18":{"start":{"line":27,"column":31},"end":{"line":48,"column":14}},"19":{"start":{"line":49,"column":12},"end":{"line":49,"column":57}},"20":{"start":{"line":51,"column":8},"end":{"line":55,"column":11}},"21":{"start":{"line":52,"column":12},"end":{"line":54,"column":15}},"22":{"start":{"line":57,"column":8},"end":{"line":57,"column":61}},"23":{"start":{"line":57,"column":32},"end":{"line":57,"column":57}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":28},"end":{"line":14,"column":29}},"loc":{"start":{"line":14,"column":40},"end":{"line":59,"column":1}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":11},"end":{"line":23,"column":12}},"loc":{"start":{"line":23,"column":23},"end":{"line":23,"column":51}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":10},"end":{"line":24,"column":11}},"loc":{"start":{"line":24,"column":22},"end":{"line":24,"column":53}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":25,"column":40},"end":{"line":25,"column":41}},"loc":{"start":{"line":25,"column":52},"end":{"line":58,"column":5}},"line":25},"4":{"name":"(anonymous_4)","decl":{"start":{"line":26,"column":15},"end":{"line":26,"column":16}},"loc":{"start":{"line":26,"column":27},"end":{"line":50,"column":9}},"line":26},"5":{"name":"(anonymous_5)","decl":{"start":{"line":51,"column":43},"end":{"line":51,"column":44}},"loc":{"start":{"line":51,"column":55},"end":{"line":55,"column":9}},"line":51},"6":{"name":"(anonymous_6)","decl":{"start":{"line":57,"column":18},"end":{"line":57,"column":19}},"loc":{"start":{"line":57,"column":30},"end":{"line":57,"column":59}},"line":57}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":16},"end":{"line":11,"column":48}},"type":"binary-expr","locations":[{"start":{"line":11,"column":16},"end":{"line":11,"column":37}},{"start":{"line":11,"column":41},"end":{"line":11,"column":48}}],"line":11}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"/home/jorzel/coding/contract-testing/graphql/src/consumer.spec.ts","sources":["/home/jorzel/coding/contract-testing/graphql/src/consumer.spec.ts"],"names":[],"mappings":";;AAAA,gGAAgG;AAChG,2BAA6B;AAC7B,2BAA6B;AAC7B,iDAAmD;AACnD,uCAAmC;AACnC,8CAK+B;AACvB,IAAA,IAAI,GAAK,eAAQ,KAAb,CAAc;AAC1B,iCAAiC;AACjC,IAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,IAAI,OAAO,CAAC;AAEnD,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAE3B,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AAEzB,QAAQ,CAAC,iBAAiB,EAAE;IAC1B,IAAM,QAAQ,GAAG,IAAI,WAAI,CAAC;QACxB,IAAI,EAAE,IAAI;QACV,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,4BAA4B,CAAC;QACtE,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC;QACzC,QAAQ,EAAE,iBAAiB;QAC3B,QAAQ,EAAE,iBAAiB;QAC3B,QAAQ,EAAE,SAAqB;KAChC,CAAC,CAAC;IAEH,MAAM,CAAC,cAAM,OAAA,QAAQ,CAAC,KAAK,EAAE,EAAhB,CAAgB,CAAC,CAAC;IAC/B,KAAK,CAAC,cAAM,OAAA,QAAQ,CAAC,QAAQ,EAAE,EAAnB,CAAmB,CAAC,CAAC;IAEjC,QAAQ,CAAC,yBAAyB,EAAE;QAClC,MAAM,CAAC;YACL,IAAM,YAAY,GAAG,IAAI,yBAAkB,EAAE;iBAC1C,aAAa,CAAC,iBAAiB,CAAC;iBAChC,SAAS,CACR,0EAID,CACA;iBACA,aAAa,CAAC,YAAY,CAAC;iBAC3B,WAAW,CAAC;gBACX,IAAI,EAAE,UAAU;gBAChB,MAAM,EAAE,MAAM;aACf,CAAC;iBACD,aAAa,CAAC;gBACb,GAAG,EAAE,KAAK;aACX,CAAC;iBACD,eAAe,CAAC;gBACf,MAAM,EAAE,GAAG;gBACX,OAAO,EAAE;oBACP,cAAc,EAAE,iCAAiC;iBAClD;gBACD,IAAI,EAAE;oBACJ,IAAI,EAAE;wBACJ,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC;qBAC5B;iBACF;aACF,CAAC,CAAC;YACL,OAAO,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE;YACjC,OAAO,MAAM,CAAC,IAAA,gBAAK,GAAE,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC9C,KAAK,EAAE,cAAc;aACtB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,2CAA2C;QAC3C,SAAS,CAAC,cAAM,OAAA,QAAQ,CAAC,MAAM,EAAE,EAAjB,CAAiB,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:no-unused-expression object-literal-sort-keys max-classes-per-file no-empty */\nimport * as chai from 'chai';\nimport * as path from 'path';\nimport * as chaiAsPromised from 'chai-as-promised';\nimport { query } from './consumer';\nimport {\n  Pact,\n  GraphQLInteraction,\n  Matchers,\n  LogLevel,\n} from '@pact-foundation/pact';\nconst { like } = Matchers;\n// import gql from \"graphql-tag\";\nconst LOG_LEVEL = process.env.LOG_LEVEL || 'TRACE';\n\nconst expect = chai.expect;\n\nchai.use(chaiAsPromised);\n\ndescribe('GraphQL example', () => {\n  const provider = new Pact({\n    port: 4000,\n    log: path.resolve(process.cwd(), 'logs', 'mockserver-integration.log'),\n    dir: path.resolve(process.cwd(), 'pacts'),\n    consumer: 'GraphQLConsumer',\n    provider: 'GraphQLProvider',\n    logLevel: LOG_LEVEL as LogLevel,\n  });\n\n  before(() => provider.setup());\n  after(() => provider.finalize());\n\n  describe('query hello on /graphql', () => {\n    before(() => {\n      const graphqlQuery = new GraphQLInteraction()\n        .uponReceiving('a hello request')\n        .withQuery(\n          `\n          query HelloQuery {\n            hello\n          }\n        `\n        )\n        .withOperation('HelloQuery')\n        .withRequest({\n          path: '/graphql',\n          method: 'POST',\n        })\n        .withVariables({\n          foo: 'bar',\n        })\n        .willRespondWith({\n          status: 200,\n          headers: {\n            'Content-Type': 'application/json; charset=utf-8',\n          },\n          body: {\n            data: {\n              hello: like('Hello world!'),\n            },\n          },\n        });\n      return provider.addInteraction(graphqlQuery);\n    });\n\n    it('returns the correct response', () => {\n      return expect(query()).to.eventually.deep.equal({\n        hello: 'Hello world!',\n      });\n    });\n\n    // verify with Pact, and reset expectations\n    afterEach(() => provider.verify());\n  });\n});\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9f99eb8dbd16fe77eee549e8e094cf2ce437ebe7","contentHash":"c8b5c4d815090510737452a0612bebaaa1aece2dac33cd67b04224865e90a520"},"/home/jorzel/coding/contract-testing/graphql/src/consumer.ts":{"path":"/home/jorzel/coding/contract-testing/graphql/src/consumer.ts","statementMap":{"0":{"start":{"line":2,"column":27},"end":{"line":5,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":115}},"2":{"start":{"line":3,"column":33},"end":{"line":3,"column":86}},"3":{"start":{"line":3,"column":96},"end":{"line":3,"column":113}},"4":{"start":{"line":4,"column":4},"end":{"line":4,"column":18}},"5":{"start":{"line":6,"column":0},"end":{"line":6,"column":62}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":23}},"7":{"start":{"line":8,"column":21},"end":{"line":8,"column":44}},"8":{"start":{"line":9,"column":30},"end":{"line":9,"column":62}},"9":{"start":{"line":10,"column":20},"end":{"line":10,"column":42}},"10":{"start":{"line":11,"column":25},"end":{"line":11,"column":52}},"11":{"start":{"line":12,"column":13},"end":{"line":21,"column":2}},"12":{"start":{"line":23,"column":4},"end":{"line":30,"column":57}},"13":{"start":{"line":30,"column":34},"end":{"line":30,"column":53}},"14":{"start":{"line":32,"column":0},"end":{"line":32,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":66},"end":{"line":2,"column":67}},"loc":{"start":{"line":2,"column":89},"end":{"line":5,"column":1}},"line":2},"1":{"name":"query","decl":{"start":{"line":22,"column":9},"end":{"line":22,"column":14}},"loc":{"start":{"line":22,"column":17},"end":{"line":31,"column":1}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":14},"end":{"line":30,"column":15}},"loc":{"start":{"line":30,"column":32},"end":{"line":30,"column":55}},"line":30}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":27},"end":{"line":5,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":28},"end":{"line":2,"column":32}},{"start":{"line":2,"column":36},"end":{"line":2,"column":61}},{"start":{"line":2,"column":66},"end":{"line":5,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":115}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":115}},{"start":{"line":3,"column":4},"end":{"line":3,"column":115}}],"line":3},"2":{"loc":{"start":{"line":25,"column":42},"end":{"line":25,"column":243}},"type":"binary-expr","locations":[{"start":{"line":25,"column":42},"end":{"line":25,"column":58}},{"start":{"line":25,"column":63},"end":{"line":25,"column":242}}],"line":25}},"s":{"0":1,"1":1,"2":1,"3":0,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1},"f":{"0":1,"1":1,"2":1},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1]},"inputSourceMap":{"version":3,"file":"/home/jorzel/coding/contract-testing/graphql/src/consumer.ts","sources":["/home/jorzel/coding/contract-testing/graphql/src/consumer.ts"],"names":[],"mappings":";;;;;;;AAAA,6CAA4C;AAC5C,+DAAsD;AACtD,2CAA8B;AAC9B,qDAAkD;AAElD,IAAM,MAAM,GAAG,IAAI,2BAAY,CAAC;IAC9B,KAAK,EAAE,IAAI,qCAAa,EAAE;IAC1B,IAAI,EAAE,IAAA,iCAAc,EAAC;QACnB,KAAK,EAAE,OAAO,CAAC,YAAY,CAAC;QAC5B,OAAO,EAAE;YACP,GAAG,EAAE,KAAK;SACX;QACD,GAAG,EAAE,+BAA+B;KACrC,CAAC;CACH,CAAC,CAAC;AAEH,SAAgB,KAAK;IACnB,OAAO,MAAM;SACV,KAAK,CAAC;QACL,KAAK,MAAE,qBAAG,sIAAA,kEAIT,IAAA;QACD,SAAS,EAAE;YACT,GAAG,EAAE,KAAK;SACX;KACF,CAAC;SACD,IAAI,CAAC,UAAC,MAAW,IAAK,OAAA,MAAM,CAAC,IAAI,EAAX,CAAW,CAAC,CAAC;AACxC,CAAC;AAbD,sBAaC","sourcesContent":["import { ApolloClient } from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport gql from 'graphql-tag';\nimport { createHttpLink } from 'apollo-link-http';\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: createHttpLink({\n    fetch: require('node-fetch'),\n    headers: {\n      foo: 'bar',\n    },\n    uri: 'http://127.0.0.1:4000/graphql',\n  }),\n});\n\nexport function query(): any {\n  return client\n    .query({\n      query: gql`\n        query HelloQuery {\n          hello\n        }\n      `,\n      variables: {\n        foo: 'bar',\n      },\n    })\n    .then((result: any) => result.data);\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"72eb4114666cbd4c8b2736c6f0d8d21d1039cbed","contentHash":"86619874ed3d51cc8b7d4b7b6febcc14291ec387ca46d60e2930975df78b5590"}}
